"notice = true;\nfunction colorTitle(title, state, html_pre = \"\", html_post = \"\") {\n    html += html_pre;\n    if (state == \"alerting\" || state == \"firing\") {\n        html += '<font color=\"#ed2e18\">';\n        colored = true;\n        notice = false;\n    } else if (state == \"ok\" || state == \"resolved\") {\n        html += '<font color=\"#10a345\">';\n        colored = true;\n    } else {\n        colored = false;\n    }\n    plain += title;\n    html += title;\n    if (colored) {\n        html += \"</font>\";\n    }\n    html += html_post;\n}\nfunction parseValueString(valueString) {\n    let resultValues = [];\n    for (let match of valueString.matchAll(/\\[(\\s*var='.*?')??\\s*(var|metric)='([^']+)'\\s+labels={([^}]*)}\\s+value=([^\\s]+)\\s*\\]/g)) {\n        let value = {\n            type: match[2],\n            metric: match[3],\n            labels: {},\n            value: parseFloat(match[5])\n        };\n        if (match[4].length > 0) {\n            for (let labelPair of match[4].split(\",\")) {\n                let labelParts = labelPair.split(\"=\");\n                if (labelParts.length === 2) {\n                    value.labels[labelParts[0].trim()] = labelParts[1].trim();\n                }\n            }\n        }\n        resultValues.push(value);\n    }\n    return resultValues;\n}\nplain = \"\";\nhtml = \"\";\ncolorTitle(data.title, data.state, \"<h2>\", \"</h2>\");\nplain += \"\\n\";\nhtml += \"\\n\";\nif (Array.isArray(data.alerts)) {\n    data.alerts.forEach(al => {\n        title = al.labels.alertname;\n        if (al.labels.rulename !== undefined) {\n            title += \" (\" + al.labels.rulename + \")\";\n        }\n        colorTitle(title, al.status, \"<h4>\", \"</h4>\");\n        if (al.annotations !== undefined && al.annotations.description !== undefined) {\n            html += \"\\n<p>\" + al.annotations.description + \"</p>\";\n            plain += \"\\n\" + al.annotations.description;\n        }\n        html += \"\\n<p><ul>\";\n        values = parseValueString(al.valueString);\n        if (Array.isArray(values)) {\n            values.forEach(val => {\n                plain += \"\\n- \" + val.metric + \": \" + val.value;\n                html += \"<li>\" + val.metric + \": \" + val.value;\n                if (val.labels !== undefined) {\n                    plain += \" (\";\n                    html += \" (\";\n                    for (const [l, v] of Object.entries(val.labels)) {\n                        if (l == \"__name__\" || val.metric.includes(v)) {\n                            continue;\n                        }\n                        plain += \" \" + l + \"=\" + v;\n                        html += \" \" + l + \"=\" + v;\n                    }\n                    plain += \" )\";\n                    html += \" )\";\n                }\n                html += \"</li>\";\n            })\n        }\n        html += \"</ul>\";\n        if (al.silenceURL !== undefined) {\n            html += \"<a href=\\\"\" + al.silenceURL + \"\\\">Mute \" + title +\"</a>\";\n        }\n        html += \"</p>\";\n    });\n}\nhtml += \"\\n<p><details><summary>Raw data</summary><pre><code class=\\\"language-json\\\">\" +\n    JSON.stringify(data, null, 2) +\n    \"</code></pre></details>\";\nresult = {\n  \"version\": \"v2\",\n  \"empty\": false,\n  \"plain\": plain,\n  \"html\": html,\n  \"msgtype\": notice ? \"m.notice\" : \"m.text\",\n}\n"
